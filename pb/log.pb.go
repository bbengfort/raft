// Code generated by protoc-gen-go. DO NOT EDIT.
// source: log.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Defines an entry in the log
type LogEntry struct {
	Index uint64 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
	Term  uint64 `protobuf:"varint,2,opt,name=term" json:"term,omitempty"`
	Name  string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Value []byte `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *LogEntry) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *LogEntry) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LogEntry) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

// Defines meta data for the log
type LogMeta struct {
	LastApplied uint64 `protobuf:"varint,1,opt,name=lastApplied" json:"lastApplied,omitempty"`
	CommitIndex uint64 `protobuf:"varint,2,opt,name=commitIndex" json:"commitIndex,omitempty"`
	Length      uint64 `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Created     *Time  `protobuf:"bytes,4,opt,name=created" json:"created,omitempty"`
	Updated     *Time  `protobuf:"bytes,5,opt,name=updated" json:"updated,omitempty"`
}

func (m *LogMeta) Reset()                    { *m = LogMeta{} }
func (m *LogMeta) String() string            { return proto.CompactTextString(m) }
func (*LogMeta) ProtoMessage()               {}
func (*LogMeta) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *LogMeta) GetLastApplied() uint64 {
	if m != nil {
		return m.LastApplied
	}
	return 0
}

func (m *LogMeta) GetCommitIndex() uint64 {
	if m != nil {
		return m.CommitIndex
	}
	return 0
}

func (m *LogMeta) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *LogMeta) GetCreated() *Time {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *LogMeta) GetUpdated() *Time {
	if m != nil {
		return m.Updated
	}
	return nil
}

// A complete log (entries and meta) that is written to disk but cannot be
// modified in place, e.g. has to be written in its entirety.
type LogSnapshot struct {
	Meta    *LogMeta    `protobuf:"bytes,1,opt,name=meta" json:"meta,omitempty"`
	Entries []*LogEntry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *LogSnapshot) Reset()                    { *m = LogSnapshot{} }
func (m *LogSnapshot) String() string            { return proto.CompactTextString(m) }
func (*LogSnapshot) ProtoMessage()               {}
func (*LogSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *LogSnapshot) GetMeta() *LogMeta {
	if m != nil {
		return m.Meta
	}
	return nil
}

func (m *LogSnapshot) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

func init() {
	proto.RegisterType((*LogEntry)(nil), "pb.LogEntry")
	proto.RegisterType((*LogMeta)(nil), "pb.LogMeta")
	proto.RegisterType((*LogSnapshot)(nil), "pb.LogSnapshot")
}

func init() { proto.RegisterFile("log.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x3f, 0x4b, 0xc4, 0x40,
	0x10, 0xc5, 0x49, 0x2e, 0xb9, 0xdc, 0xcd, 0x5e, 0xb5, 0x88, 0x2c, 0x36, 0x86, 0x14, 0x92, 0x2a,
	0x45, 0xfc, 0x04, 0x16, 0x16, 0x42, 0x6c, 0x56, 0xb1, 0x14, 0x36, 0x97, 0x21, 0xb7, 0x90, 0xfd,
	0x43, 0x32, 0x27, 0xfa, 0xa1, 0xfc, 0x8e, 0x92, 0x4d, 0x0e, 0x0e, 0xbb, 0x79, 0xef, 0xfd, 0x96,
	0x79, 0x3b, 0xb0, 0x1f, 0x5c, 0x5f, 0xf9, 0xd1, 0x91, 0xe3, 0xb1, 0x6f, 0xef, 0x80, 0xb4, 0xc1,
	0x45, 0x17, 0x9f, 0xb0, 0x6b, 0x5c, 0xff, 0x6c, 0x69, 0xfc, 0xe1, 0x37, 0x90, 0x6a, 0xdb, 0xe1,
	0xb7, 0x88, 0xf2, 0xa8, 0x4c, 0xe4, 0x22, 0x38, 0x87, 0x84, 0x70, 0x34, 0x22, 0x0e, 0x66, 0x98,
	0x67, 0xcf, 0x2a, 0x83, 0x22, 0xc9, 0xa3, 0x72, 0x2f, 0xc3, 0x3c, 0xbf, 0xfe, 0x52, 0xc3, 0x19,
	0x45, 0x9a, 0x47, 0xe5, 0x41, 0x2e, 0xa2, 0xf8, 0x8d, 0x20, 0x6b, 0x5c, 0xff, 0x8a, 0xa4, 0x78,
	0x0e, 0x6c, 0x50, 0x13, 0x3d, 0x79, 0x3f, 0x68, 0xec, 0xd6, 0x2d, 0xd7, 0xd6, 0x4c, 0x1c, 0x9d,
	0x31, 0x9a, 0x5e, 0x42, 0x8f, 0x65, 0xe5, 0xb5, 0xc5, 0x6f, 0x61, 0x3b, 0xa0, 0xed, 0xe9, 0x24,
	0x36, 0x21, 0x5c, 0x15, 0x2f, 0x20, 0x3b, 0x8e, 0xa8, 0x08, 0xbb, 0x50, 0x8a, 0xd5, 0xbb, 0xca,
	0xb7, 0xd5, 0xbb, 0x36, 0x28, 0x2f, 0xc1, 0xcc, 0x9c, 0x7d, 0x17, 0x98, 0xf4, 0x3f, 0xb3, 0x06,
	0xc5, 0x07, 0xb0, 0xc6, 0xf5, 0x6f, 0x56, 0xf9, 0xe9, 0xe4, 0x88, 0xdf, 0x43, 0x62, 0x90, 0x54,
	0xe8, 0xca, 0x6a, 0x36, 0xf3, 0xeb, 0x6f, 0x64, 0x08, 0xf8, 0x03, 0x64, 0x68, 0x69, 0xd4, 0x38,
	0x89, 0x38, 0xdf, 0x94, 0xac, 0x3e, 0xac, 0x4c, 0x38, 0xa9, 0xbc, 0x84, 0xed, 0x36, 0x9c, 0xfb,
	0xf1, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xcf, 0x8d, 0x28, 0x65, 0x8b, 0x01, 0x00, 0x00,
}
