// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Raft service

type RaftClient interface {
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
	CommitStream(ctx context.Context, opts ...grpc.CallOption) (Raft_CommitStreamClient, error)
	RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error)
	AppendEntries(ctx context.Context, opts ...grpc.CallOption) (Raft_AppendEntriesClient, error)
}

type raftClient struct {
	cc *grpc.ClientConn
}

func NewRaftClient(cc *grpc.ClientConn) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := grpc.Invoke(ctx, "/pb.Raft/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) CommitStream(ctx context.Context, opts ...grpc.CallOption) (Raft_CommitStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[0], c.cc, "/pb.Raft/CommitStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftCommitStreamClient{stream}
	return x, nil
}

type Raft_CommitStreamClient interface {
	Send(*CommitRequest) error
	Recv() (*CommitReply, error)
	grpc.ClientStream
}

type raftCommitStreamClient struct {
	grpc.ClientStream
}

func (x *raftCommitStreamClient) Send(m *CommitRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftCommitStreamClient) Recv() (*CommitReply, error) {
	m := new(CommitReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *raftClient) RequestVote(ctx context.Context, in *VoteRequest, opts ...grpc.CallOption) (*VoteReply, error) {
	out := new(VoteReply)
	err := grpc.Invoke(ctx, "/pb.Raft/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, opts ...grpc.CallOption) (Raft_AppendEntriesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Raft_serviceDesc.Streams[1], c.cc, "/pb.Raft/AppendEntries", opts...)
	if err != nil {
		return nil, err
	}
	x := &raftAppendEntriesClient{stream}
	return x, nil
}

type Raft_AppendEntriesClient interface {
	Send(*AppendRequest) error
	Recv() (*AppendReply, error)
	grpc.ClientStream
}

type raftAppendEntriesClient struct {
	grpc.ClientStream
}

func (x *raftAppendEntriesClient) Send(m *AppendRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *raftAppendEntriesClient) Recv() (*AppendReply, error) {
	m := new(AppendReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Raft service

type RaftServer interface {
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
	CommitStream(Raft_CommitStreamServer) error
	RequestVote(context.Context, *VoteRequest) (*VoteReply, error)
	AppendEntries(Raft_AppendEntriesServer) error
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_CommitStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).CommitStream(&raftCommitStreamServer{stream})
}

type Raft_CommitStreamServer interface {
	Send(*CommitReply) error
	Recv() (*CommitRequest, error)
	grpc.ServerStream
}

type raftCommitStreamServer struct {
	grpc.ServerStream
}

func (x *raftCommitStreamServer) Send(m *CommitReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftCommitStreamServer) Recv() (*CommitRequest, error) {
	m := new(CommitRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*VoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RaftServer).AppendEntries(&raftAppendEntriesServer{stream})
}

type Raft_AppendEntriesServer interface {
	Send(*AppendReply) error
	Recv() (*AppendRequest, error)
	grpc.ServerStream
}

type raftAppendEntriesServer struct {
	grpc.ServerStream
}

func (x *raftAppendEntriesServer) Send(m *AppendReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *raftAppendEntriesServer) Recv() (*AppendRequest, error) {
	m := new(AppendRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Commit",
			Handler:    _Raft_Commit_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CommitStream",
			Handler:       _Raft_CommitStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AppendEntries",
			Handler:       _Raft_AppendEntries_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "service.proto",
}

func init() { proto.RegisterFile("service.proto", fileDescriptor3) }

var fileDescriptor3 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4e, 0x2d, 0x2a,
	0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x92, 0xe2, 0x49,
	0x2c, 0x28, 0x48, 0xcd, 0x4b, 0x81, 0x88, 0x48, 0xf1, 0x24, 0xe7, 0x64, 0xa6, 0xe6, 0x95, 0x40,
	0x79, 0x5c, 0x65, 0xf9, 0x25, 0x50, 0xb5, 0x46, 0x77, 0x18, 0xb9, 0x58, 0x82, 0x12, 0xd3, 0x4a,
	0x84, 0xf4, 0xb8, 0xd8, 0x9c, 0xf3, 0x73, 0x73, 0x33, 0x4b, 0x84, 0x04, 0xf5, 0x0a, 0x92, 0xf4,
	0x20, 0xec, 0xa0, 0xd4, 0xc2, 0xd2, 0xd4, 0xe2, 0x12, 0x29, 0x7e, 0x64, 0xa1, 0x82, 0x9c, 0x4a,
	0x25, 0x06, 0x21, 0x0b, 0x2e, 0x1e, 0x88, 0x40, 0x70, 0x49, 0x51, 0x6a, 0x62, 0x2e, 0x71, 0xba,
	0x34, 0x18, 0x0d, 0x18, 0x85, 0xf4, 0xb9, 0xb8, 0xa1, 0x2a, 0xc2, 0xf2, 0x4b, 0x52, 0x85, 0xc0,
	0xaa, 0x40, 0x2c, 0x98, 0x36, 0x5e, 0x84, 0x00, 0xc4, 0x2a, 0x4b, 0x2e, 0x5e, 0x47, 0xb0, 0x6f,
	0x5c, 0xf3, 0x4a, 0x8a, 0x32, 0x53, 0x8b, 0x21, 0x76, 0x41, 0x84, 0x50, 0xec, 0x82, 0x09, 0xc1,
	0xed, 0x4a, 0x62, 0x03, 0xfb, 0xd2, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xde, 0xae, 0xe6, 0x83,
	0x22, 0x01, 0x00, 0x00,
}
